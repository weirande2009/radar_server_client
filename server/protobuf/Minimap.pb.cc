// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Minimap.proto

#include "Minimap.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
extern PROTOBUF_INTERNAL_EXPORT_Minimap_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Minimap_friendPositions_Minimap_2eproto;
namespace Transfer {
class Minimap_friendPositionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Minimap_friendPositions> _instance;
} _Minimap_friendPositions_default_instance_;
class MinimapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Minimap> _instance;
} _Minimap_default_instance_;
}  // namespace Transfer
static void InitDefaultsscc_info_Minimap_Minimap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Transfer::_Minimap_default_instance_;
    new (ptr) ::Transfer::Minimap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Minimap_Minimap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Minimap_Minimap_2eproto}, {
      &scc_info_Minimap_friendPositions_Minimap_2eproto.base,}};

static void InitDefaultsscc_info_Minimap_friendPositions_Minimap_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Transfer::_Minimap_friendPositions_default_instance_;
    new (ptr) ::Transfer::Minimap_friendPositions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Minimap_friendPositions_Minimap_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Minimap_friendPositions_Minimap_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Minimap_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Minimap_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Minimap_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Minimap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Transfer::Minimap_friendPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Transfer::Minimap_friendPositions, x_),
  PROTOBUF_FIELD_OFFSET(::Transfer::Minimap_friendPositions, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Transfer::Minimap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Transfer::Minimap, friendnumber_),
  PROTOBUF_FIELD_OFFSET(::Transfer::Minimap, fpositions_),
  PROTOBUF_FIELD_OFFSET(::Transfer::Minimap, enemynumber_),
  PROTOBUF_FIELD_OFFSET(::Transfer::Minimap, epositions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Transfer::Minimap_friendPositions)},
  { 7, -1, sizeof(::Transfer::Minimap)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Transfer::_Minimap_friendPositions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Transfer::_Minimap_default_instance_),
};

const char descriptor_table_protodef_Minimap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rMinimap.proto\022\010Transfer\"\313\001\n\007Minimap\022\024\n"
  "\014friendNumber\030\001 \001(\005\0225\n\nfPositions\030\002 \003(\0132"
  "!.Transfer.Minimap.friendPositions\022\023\n\013en"
  "emyNumber\030\003 \001(\005\0225\n\nePositions\030\004 \003(\0132!.Tr"
  "ansfer.Minimap.friendPositions\032\'\n\017friend"
  "Positions\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Minimap_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Minimap_2eproto_sccs[2] = {
  &scc_info_Minimap_Minimap_2eproto.base,
  &scc_info_Minimap_friendPositions_Minimap_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Minimap_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Minimap_2eproto = {
  false, false, descriptor_table_protodef_Minimap_2eproto, "Minimap.proto", 239,
  &descriptor_table_Minimap_2eproto_once, descriptor_table_Minimap_2eproto_sccs, descriptor_table_Minimap_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_Minimap_2eproto::offsets,
  file_level_metadata_Minimap_2eproto, 2, file_level_enum_descriptors_Minimap_2eproto, file_level_service_descriptors_Minimap_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Minimap_2eproto(&descriptor_table_Minimap_2eproto);
namespace Transfer {

// ===================================================================

class Minimap_friendPositions::_Internal {
 public:
};

Minimap_friendPositions::Minimap_friendPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Transfer.Minimap.friendPositions)
}
Minimap_friendPositions::Minimap_friendPositions(const Minimap_friendPositions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Transfer.Minimap.friendPositions)
}

void Minimap_friendPositions::SharedCtor() {
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Minimap_friendPositions::~Minimap_friendPositions() {
  // @@protoc_insertion_point(destructor:Transfer.Minimap.friendPositions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Minimap_friendPositions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Minimap_friendPositions::ArenaDtor(void* object) {
  Minimap_friendPositions* _this = reinterpret_cast< Minimap_friendPositions* >(object);
  (void)_this;
}
void Minimap_friendPositions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Minimap_friendPositions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Minimap_friendPositions& Minimap_friendPositions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Minimap_friendPositions_Minimap_2eproto.base);
  return *internal_default_instance();
}


void Minimap_friendPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:Transfer.Minimap.friendPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Minimap_friendPositions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Minimap_friendPositions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transfer.Minimap.friendPositions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transfer.Minimap.friendPositions)
  return target;
}

size_t Minimap_friendPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transfer.Minimap.friendPositions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Minimap_friendPositions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Transfer.Minimap.friendPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const Minimap_friendPositions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Minimap_friendPositions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Transfer.Minimap.friendPositions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Transfer.Minimap.friendPositions)
    MergeFrom(*source);
  }
}

void Minimap_friendPositions::MergeFrom(const Minimap_friendPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Transfer.Minimap.friendPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void Minimap_friendPositions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Transfer.Minimap.friendPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Minimap_friendPositions::CopyFrom(const Minimap_friendPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transfer.Minimap.friendPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Minimap_friendPositions::IsInitialized() const {
  return true;
}

void Minimap_friendPositions::InternalSwap(Minimap_friendPositions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Minimap_friendPositions, y_)
      + sizeof(Minimap_friendPositions::y_)
      - PROTOBUF_FIELD_OFFSET(Minimap_friendPositions, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Minimap_friendPositions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Minimap::_Internal {
 public:
};

Minimap::Minimap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fpositions_(arena),
  epositions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Transfer.Minimap)
}
Minimap::Minimap(const Minimap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      fpositions_(from.fpositions_),
      epositions_(from.epositions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&friendnumber_, &from.friendnumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&enemynumber_) -
    reinterpret_cast<char*>(&friendnumber_)) + sizeof(enemynumber_));
  // @@protoc_insertion_point(copy_constructor:Transfer.Minimap)
}

void Minimap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Minimap_Minimap_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&friendnumber_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&enemynumber_) -
      reinterpret_cast<char*>(&friendnumber_)) + sizeof(enemynumber_));
}

Minimap::~Minimap() {
  // @@protoc_insertion_point(destructor:Transfer.Minimap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Minimap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Minimap::ArenaDtor(void* object) {
  Minimap* _this = reinterpret_cast< Minimap* >(object);
  (void)_this;
}
void Minimap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Minimap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Minimap& Minimap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Minimap_Minimap_2eproto.base);
  return *internal_default_instance();
}


void Minimap::Clear() {
// @@protoc_insertion_point(message_clear_start:Transfer.Minimap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fpositions_.Clear();
  epositions_.Clear();
  ::memset(&friendnumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enemynumber_) -
      reinterpret_cast<char*>(&friendnumber_)) + sizeof(enemynumber_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Minimap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 friendNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          friendnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Transfer.Minimap.friendPositions fPositions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fpositions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 enemyNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          enemynumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Transfer.Minimap.friendPositions ePositions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_epositions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Minimap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Transfer.Minimap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 friendNumber = 1;
  if (this->friendnumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_friendnumber(), target);
  }

  // repeated .Transfer.Minimap.friendPositions fPositions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fpositions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_fpositions(i), target, stream);
  }

  // int32 enemyNumber = 3;
  if (this->enemynumber() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_enemynumber(), target);
  }

  // repeated .Transfer.Minimap.friendPositions ePositions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_epositions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_epositions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Transfer.Minimap)
  return target;
}

size_t Minimap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Transfer.Minimap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Transfer.Minimap.friendPositions fPositions = 2;
  total_size += 1UL * this->_internal_fpositions_size();
  for (const auto& msg : this->fpositions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .Transfer.Minimap.friendPositions ePositions = 4;
  total_size += 1UL * this->_internal_epositions_size();
  for (const auto& msg : this->epositions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 friendNumber = 1;
  if (this->friendnumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_friendnumber());
  }

  // int32 enemyNumber = 3;
  if (this->enemynumber() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_enemynumber());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Minimap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Transfer.Minimap)
  GOOGLE_DCHECK_NE(&from, this);
  const Minimap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Minimap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Transfer.Minimap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Transfer.Minimap)
    MergeFrom(*source);
  }
}

void Minimap::MergeFrom(const Minimap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Transfer.Minimap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fpositions_.MergeFrom(from.fpositions_);
  epositions_.MergeFrom(from.epositions_);
  if (from.friendnumber() != 0) {
    _internal_set_friendnumber(from._internal_friendnumber());
  }
  if (from.enemynumber() != 0) {
    _internal_set_enemynumber(from._internal_enemynumber());
  }
}

void Minimap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Transfer.Minimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Minimap::CopyFrom(const Minimap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Transfer.Minimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Minimap::IsInitialized() const {
  return true;
}

void Minimap::InternalSwap(Minimap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  fpositions_.InternalSwap(&other->fpositions_);
  epositions_.InternalSwap(&other->epositions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Minimap, enemynumber_)
      + sizeof(Minimap::enemynumber_)
      - PROTOBUF_FIELD_OFFSET(Minimap, friendnumber_)>(
          reinterpret_cast<char*>(&friendnumber_),
          reinterpret_cast<char*>(&other->friendnumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Minimap::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Transfer
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Transfer::Minimap_friendPositions* Arena::CreateMaybeMessage< ::Transfer::Minimap_friendPositions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Transfer::Minimap_friendPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::Transfer::Minimap* Arena::CreateMaybeMessage< ::Transfer::Minimap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Transfer::Minimap >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
